version: "3.6"
services:

### Termination PRoxy ################################################
    # proxy:
    #     image: optaros/ssl-termination-proxy:latest #mnuessler/tls-termination-proxy:latest
    #     container_name: ${PROJECT_PREFIX}_docker_termination_proxy
    #     ports:
    #         - "8080:8080"
    #         - "443:443"
    #     environment:
    #         HOST_IP: varnish
    #         PORT: 80
    #     networks:
    #         - magento2
    #     depends_on:
    #         - varnish

### Varnish ################################################
    # varnish:
    #     image: emgag/varnish:6.6.0
    #     container_name: ${PROJECT_PREFIX}_docker_varnish
    #     ports:
    #         - "80:80"
    #         - "6082:6082"
    #     environment:
    #         VARNISH_PORT: 80
    #         TERM: xterm
    #         VARNISH_DAEMON_OPTS: "-S /etc/varnish/key.psk -p cli_buffer=16384 -p feature=+esi_ignore_other_elements -p vcc_allow_inline_c=on"
    #         VARNISH_MANAGEMENT_LISTEN: ":6082"
    #     volumes:
    #         - ./docker/varnish:/etc/varnish
    #     links:
    #         - "web:web"
    #     networks:
    #         magento2:
    #             aliases:
    #                 - varnish
    #                 - <add local vhost doamin name here>

### MAGENTO APP CuctomConcepts ################################################
#     web:
#         build: ./docker/web
#         container_name: ${PROJECT_PREFIX}_docker_web
#         ports:
#             - "80:80"
#             - "443:443"
#         volumes:
#             - sock:/sock
#             - "./src:/var/www/html"
#             - "./modules:/var/www/modules"
#             - "./docker/web/apache2:/etc/apache2/sites-enabled/"
#             - "./docker/web/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini"
#             - "./docker/web/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini"
#             - "./docker/web/postfix/master.cf:/etc/postfix/master.cf"
#             - "./docker/web/postfix/main.cf:/etc/postfix/main.cf"
#             - "./docker/web/logs:/var/log"
#             - "./docker/web/rc.local:/etc/rc.local"
#             - "./docker/web/apache2/gocustomized-m2.local.crt:/etc/apache2/gocustomized-m2.local.crt"
#             - "./docker/web/apache2/gocustomized-m2.local.key:/etc/apache2/gocustomized-m2.local.key"
#         environment:
#             PHP_EXTENSION_XDEBUG: ${PHP_EXTENSION_XDEBUG}
#             APACHE_EXTENSION_DAV: 1
#             APACHE_EXTENSION_SSL: 1
#         tty: true
# #        links:
# #            - redis
#         # command: bash -c "sudo service rsyslog restart && sudo service postfix restart"
#         depends_on:
#             - db
# #            - redis
#         networks:
#             - magento2

### MySQL ################################################
    # db:
    #     build:
    #         context: ./docker/mysql
    #         args:
    #             - MYSQL_VERSION=${MYSQL_VERSION}
    #     container_name: ${PROJECT_PREFIX}_docker_db
    #     env_file:
    #         - ".env"
    #     environment:
    #         - MYSQL_DATABASE=${MYSQL_DATABASE}
    #         - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    #         - MYSQL_USER=${MYSQL_USER}
    #         - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    #     volumes:
    #     - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
    #     - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    #     ports:
    #         - "5506:3306"
    #     networks:
    #         - magento2

### phpMyAdmin ###########################################
    # phpmyadmin:
    #     image: phpmyadmin/phpmyadmin
    #     container_name: ${PROJECT_PREFIX}_docker_phpmyadmin
    #     env_file:
    #         - ".env"
    #     environment:
    #         - PMA_ARBITRARY=1
    #         - MYSQL_USER=root
    #         - MYSQL_PASSWORD=root ${MYSQL_ROOT_PASSWORD}
    #         - MYSQL_ROOT_PASSWORD=root ${MYSQL_ROOT_PASSWORD}
    #     ports:
    #         - "8083:80"
    #     depends_on:
    #         - db
    #     networks:
    #         - magento2

## Redis ################################################ 
    redis:
        image: redis:5.0.5
        container_name: ${PROJECT_PREFIX}_docker_redis
        env_file:
            - ".env"
        volumes:
            - redis:/data
        ports:
            - "6379:6379"
        tty: true
        networks:
            - magento2

### RabbitMQ ################################################
    # rabbitmq:
    #     image: bitnami/rabbitmq:latest
    #     container_name: ${PROJECT_PREFIX}_docker_rabbitmq
    #     labels:
    #         kompose.service.type: nodeport
    #     ports:
    #         - '4369:4369'
    #         - '5672:5672'
    #         - '25672:25672'
    #         - '15672:15672'
    #     volumes:
    #         - 'rabbitmq_data:/bitnami'
    #     environment:
    #         - RABBITMQ_USERNAME=magento2
    #         - RABBITMQ_PASSWORD=magento2
    #         - RABBITMQ_VHOST=magento2
    #     networks:
    #     - magento2

### Mailhog ################################################
    mailhog:
        image: mailhog/mailhog:v1.0.0
        container_name: ${PROJECT_PREFIX}_docker_mailhog
        ports:
            - "1025:1025"
            - "8025:8025"
        networks:
            - magento2

### Portainer ################################################
    # portainer:
    #     image: portainer/portainer:latest
    #     container_name: ${PROJECT_PREFIX}_docker_portainer
    #     volumes:
    #         - ${DATA_PATH_HOST}/portainer_data:/data
    #         - /var/run/docker.sock:/var/run/docker.sock
    #     extra_hosts:
    #         - "dockerhost:${DOCKER_HOST_IP}"
    #     ports:
    #         - 9010:9000
    #     networks:
    #         - magento2

### Elasticsearch ###########################################
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
        container_name: ${PROJECT_PREFIX}_docker_elasticsearch
        environment:
            - node.name=elasticsearch
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - discovery.type=single-node
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - esdata01:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
        networks:
            - magento2

### SonarQube ################################################
    # sonarqube:
    #     build:
    #         context: ./docker/sonarqube
    #         args:
    #             - SONAR_HOST=${SONAR_HOST}
    #             - SONAR_LOGIN_TOKEN=${SONAR_LOGIN_TOKEN}
    #     env_file:
    #         - ".env"
    #     ports:
    #         - "9225:9225"
    #     networks:
    #         - backend

volumes:
    # nfsmount:
    #     driver: local
    #     driver_opts:
    #         type: nfs
    #         o: addr=host.docker.internal,rw,nolock,hard,nointr,nfsvers=3
    #         device: ":/home/mdelosreyes/Documents/Docker/docker/src/Projects/TinSoldier/Magento2"
    redis: {}
    rabbitmq_data:
        driver: local
    mysql:
    sock:
    db-data:
    esdata01:
        driver: local

networks:
    magento2:
        driver: bridge